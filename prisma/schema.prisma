// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productNumber   Int      @unique(map: "product_idx")
  name            String
  description     String
  details         String
  price           Decimal  @default(0) @db.Decimal(12, 2)
  banner          String
  brand           String
  category        String
  quantityInStock Int
  images          String[]
  star            Decimal  @default(0) @db.Decimal(3, 2)
  numReviews      Int      @default(0)
  isFeatured      Boolean  @default(false)
  createdAt       DateTime @default(now()) @db.Timestamp(6)
  updatedAt       DateTime @updatedAt
}

model User {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @default("NO_NAME")
  email String @unique(map: "user_email_idx")

  emailVerified DateTime? @db.Timestamp(6)
  password      String?
  role          String    @default("user")
  address       Json?     @db.Json
  paymentMethod String?
  image         String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt

  account Account[]
  session Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String @id
  userId       String @db.Uuid

  expires DateTime @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
